{"version":3,"sources":["components/editor/editor.component.tsx","components/previewer/previewer.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Editor","textArea","changeTextArea","className","value","onChange","Preview","clean","DOMPurify","sanitize","marked","dangerouslySetInnerHTML","__html","App","useState","textAreaValue","setTextAreaValue","ev","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAmBeA,MAVf,YAA0E,IAAxDC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,eAC1B,OACE,0BACEC,UAAU,kBACVC,MAAOH,EACPI,SAAUH,K,sCCQDI,MAXf,YAA4D,IAAzCL,EAAwC,EAAxCA,SACXM,EAAQC,IAAUC,SAASC,IAAOT,IAExC,OACE,qBACEE,UAAU,yBACVQ,wBAAyB,CAAEC,OAAQL,MCmC1BM,MAvCf,WAEE,IAFa,EAG6BC,mBADrB,o9CAFR,mBAGNC,EAHM,KAGSC,EAHT,KAyBb,OACE,sBAAKb,UAAU,qBAAf,UACE,cAAC,EAAD,CAAQF,SAAUc,EAAeb,eARP,SAC5Be,GAEAD,EAAiBC,EAAGC,OAAOd,UAYzB,cAAC,EAAD,CAAWH,SAAUc,QCjCZI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.80e00909.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\n\nimport \"./editor.styles.scss\";\n\ntype EditorProps = {\n  textArea: string;\n  changeTextArea: (ev: React.ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nfunction Editor({ textArea, changeTextArea }: EditorProps): ReactElement {\n  return (\n    <textarea\n      className=\"editor w-50 p-5\"\n      value={textArea}\n      onChange={changeTextArea}\n    />\n  );\n}\n\nexport default Editor;\n","import React, { ReactElement } from \"react\";\n\nimport marked from \"marked\";\nimport DOMPurify from \"dompurify\";\n\nimport \"./previewer.styles.scss\";\n\ntype PreviewProps = {\n  textArea: string;\n};\n\nfunction Preview({ textArea }: PreviewProps): ReactElement {\n  const clean = DOMPurify.sanitize(marked(textArea));\n\n  return (\n    <div\n      className=\"w-50 p-5 overflow-auto\"\n      dangerouslySetInnerHTML={{ __html: clean }}\n    />\n  );\n}\n\nexport default Preview;\n","/** Local Markdown **/\nimport React, { useState } from \"react\";\n\n/** Fetched Markdown **/\n// import React, { useEffect, useState } from \"react\";\n\nimport \"./App.scss\";\nimport Editor from \"./components/editor/editor.component\";\nimport Previewer from \"./components/previewer/previewer.component\";\n\n/** Local Markdown **/\nimport raw from \"raw.macro\";\n\nfunction App() {\n  /** Local Markdown **/\n  const inicialMarkdown = raw(\"./demo.md\");\n  const [textAreaValue, setTextAreaValue] = useState(inicialMarkdown);\n\n  /** Fetched Markdown **/\n  // const [textAreaValue, setTextAreaValue] = useState(\"\");\n  // useEffect(() => {\n  //   fetch(\"https://raw.githubusercontent.com/Beamanator/fdi/master/README.md\")\n  //     .then((response) => {\n  //       if (response.ok) return response.text();\n  //       else return Promise.reject(\"Didn't fetch text correctly\");\n  //     })\n  //     .then((text) => {\n  //       setTextAreaValue(text);\n  //     })\n  //     .catch((error) => console.error(error));\n  // }, []);\n\n  const changeTextAreaHandler = (\n    ev: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    setTextAreaValue(ev.target.value);\n  };\n\n  return (\n    <div className=\"App d-flex vh-100 \">\n      <Editor textArea={textAreaValue} changeTextArea={changeTextAreaHandler} />\n      {/* <textarea\n        value={textAreaValue}\n        onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>): void =>\n          setTextAreaValue(ev.target.value)\n        }\n      /> */}\n      <Previewer textArea={textAreaValue} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}